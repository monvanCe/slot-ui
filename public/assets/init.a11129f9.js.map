{"version":3,"file":"init.a11129f9.js","sources":["../../node_modules/pixi.js/lib/app/ResizePlugin.mjs","../../node_modules/pixi.js/lib/app/TickerPlugin.mjs","../../node_modules/pixi.js/lib/filters/FilterPipe.mjs","../../node_modules/pixi.js/lib/scene/container/bounds/getRenderableBounds.mjs","../../node_modules/pixi.js/lib/filters/FilterSystem.mjs","../../node_modules/pixi.js/lib/scene/mesh/shared/MeshGeometry.mjs","../../node_modules/pixi.js/lib/scene/text-html/HTMLTextRenderData.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/measureHtmlText.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/GraphicsPipe.mjs","../../node_modules/pixi.js/lib/scene/mesh-plane/PlaneGeometry.mjs","../../node_modules/pixi.js/lib/scene/mesh/shared/BatchableMesh.mjs","../../node_modules/pixi.js/lib/scene/mesh/shared/MeshPipe.mjs","../../node_modules/pixi.js/lib/scene/particle-container/gl/GlParticleContainerAdaptor.mjs","../../node_modules/pixi.js/lib/scene/particle-container/gpu/GpuParticleContainerAdaptor.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/utils/createIndicesForQuads.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/utils/generateParticleUpdateFunction.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/ParticleBuffer.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.frag.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.vert.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.wgsl.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/ParticleShader.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/ParticleContainerPipe.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/GlParticleContainerPipe.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/GpuParticleContainerPipe.mjs","../../node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceGeometry.mjs","../../node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceSpritePipe.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/shader/tilingBit.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/shader/TilingSpriteShader.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/QuadGeometry.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/setPositions.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/applyMatrix.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/setUvs.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/TilingSpritePipe.mjs","../../node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/localUniformMSDFBit.mjs","../../node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/mSDFBit.mjs","../../node_modules/pixi.js/lib/scene/text/sdfShader/SdfShader.mjs","../../node_modules/pixi.js/lib/scene/text-bitmap/BitmapTextPipe.mjs","../../node_modules/pixi.js/lib/scene/text-html/BatchableHTMLText.mjs","../../node_modules/pixi.js/lib/scene/text/utils/updateTextBounds.mjs","../../node_modules/pixi.js/lib/scene/text-html/HTMLTextPipe.mjs","../../node_modules/pixi.js/lib/utils/browser/isSafari.mjs","../../node_modules/pixi.js/lib/scene/text/utils/getPo2TextureFromSource.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/extractFontFamilies.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/loadFontAsBase64.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/loadFontCSS.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/getFontCss.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/getSVGUrl.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/getTemporaryCanvasFromImage.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/loadSVGImage.mjs","../../node_modules/pixi.js/lib/scene/text-html/HTMLTextSystem.mjs","../../node_modules/pixi.js/lib/scene/text/canvas/BatchableText.mjs","../../node_modules/pixi.js/lib/scene/text/canvas/CanvasTextPipe.mjs","../../node_modules/pixi.js/lib/scene/text/canvas/CanvasTextSystem.mjs","../../node_modules/pixi.js/lib/app/init.mjs","../../node_modules/pixi.js/lib/scene/graphics/init.mjs","../../node_modules/pixi.js/lib/scene/mesh/init.mjs","../../node_modules/pixi.js/lib/scene/particle-container/init.mjs","../../node_modules/pixi.js/lib/scene/text/init.mjs","../../node_modules/pixi.js/lib/scene/text-bitmap/init.mjs","../../node_modules/pixi.js/lib/scene/text-html/init.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/init.mjs","../../node_modules/pixi.js/lib/scene/sprite-nine-slice/init.mjs","../../node_modules/pixi.js/lib/filters/init.mjs"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ResizePlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    Object.defineProperty(\n      this,\n      \"resizeTo\",\n      {\n        set(dom) {\n          globalThis.removeEventListener(\"resize\", this.queueResize);\n          this._resizeTo = dom;\n          if (dom) {\n            globalThis.addEventListener(\"resize\", this.queueResize);\n            this.resize();\n          }\n        },\n        get() {\n          return this._resizeTo;\n        }\n      }\n    );\n    this.queueResize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      this._resizeId = requestAnimationFrame(() => this.resize());\n    };\n    this._cancelResize = () => {\n      if (this._resizeId) {\n        cancelAnimationFrame(this._resizeId);\n        this._resizeId = null;\n      }\n    };\n    this.resize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      let width;\n      let height;\n      if (this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } else {\n        const { clientWidth, clientHeight } = this._resizeTo;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      this.renderer.resize(width, height);\n      this.render();\n    };\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  }\n  /**\n   * Clean up the ticker, scoped to application\n   * @private\n   */\n  static destroy() {\n    globalThis.removeEventListener(\"resize\", this.queueResize);\n    this._cancelResize();\n    this._cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  }\n}\n/** @ignore */\nResizePlugin.extension = ExtensionType.Application;\n\nexport { ResizePlugin };\n//# sourceMappingURL=ResizePlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { UPDATE_PRIORITY } from '../ticker/const.mjs';\nimport { Ticker } from '../ticker/Ticker.mjs';\n\n\"use strict\";\nclass TickerPlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    options = Object.assign({\n      autoStart: true,\n      sharedTicker: false\n    }, options);\n    Object.defineProperty(\n      this,\n      \"ticker\",\n      {\n        set(ticker) {\n          if (this._ticker) {\n            this._ticker.remove(this.render, this);\n          }\n          this._ticker = ticker;\n          if (ticker) {\n            ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n          }\n        },\n        get() {\n          return this._ticker;\n        }\n      }\n    );\n    this.stop = () => {\n      this._ticker.stop();\n    };\n    this.start = () => {\n      this._ticker.start();\n    };\n    this._ticker = null;\n    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n    if (options.autoStart) {\n      this.start();\n    }\n  }\n  /**\n   * Clean up the ticker, scoped to application.\n   * @private\n   */\n  static destroy() {\n    if (this._ticker) {\n      const oldTicker = this._ticker;\n      this.ticker = null;\n      oldTicker.destroy();\n    }\n  }\n}\n/** @ignore */\nTickerPlugin.extension = ExtensionType.Application;\n\nexport { TickerPlugin };\n//# sourceMappingURL=TickerPlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass FilterPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  push(filterEffect, container, instructionSet) {\n    const renderPipes = this._renderer.renderPipes;\n    renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      canBundle: false,\n      action: \"pushFilter\",\n      container,\n      filterEffect\n    });\n  }\n  pop(_filterEffect, _container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    if (instruction.action === \"pushFilter\") {\n      this._renderer.filter.push(instruction);\n    } else if (instruction.action === \"popFilter\") {\n      this._renderer.filter.pop();\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nFilterPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"filter\"\n};\n\nexport { FilterPipe };\n//# sourceMappingURL=FilterPipe.mjs.map\n","\"use strict\";\nfunction getGlobalRenderableBounds(renderables, bounds) {\n  bounds.clear();\n  const tempMatrix = bounds.matrix;\n  for (let i = 0; i < renderables.length; i++) {\n    const renderable = renderables[i];\n    if (renderable.globalDisplayStatus < 7) {\n      continue;\n    }\n    bounds.matrix = renderable.worldTransform;\n    bounds.addBounds(renderable.bounds);\n  }\n  bounds.matrix = tempMatrix;\n  return bounds;\n}\n\nexport { getGlobalRenderableBounds };\n//# sourceMappingURL=getRenderableBounds.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Matrix } from '../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../rendering/renderers/types.mjs';\nimport { Bounds } from '../scene/container/bounds/Bounds.mjs';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds.mjs';\nimport { warn } from '../utils/logging/warn.mjs';\n\n\"use strict\";\nconst quadGeometry = new Geometry({\n  attributes: {\n    aPosition: {\n      buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      format: \"float32x2\",\n      stride: 2 * 4,\n      offset: 0\n    }\n  },\n  indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3])\n});\nclass FilterData {\n  constructor() {\n    /**\n     * Indicates whether the filter should be skipped.\n     * @type {boolean}\n     */\n    this.skip = false;\n    /**\n     * The texture to which the filter is applied.\n     * @type {Texture}\n     */\n    this.inputTexture = null;\n    /**\n     * The back texture used for blending, if required.\n     * @type {Texture | null}\n     */\n    this.backTexture = null;\n    /**\n     * The list of filters to be applied.\n     * @type {Filter[]}\n     */\n    this.filters = null;\n    /**\n     * The bounds of the filter area.\n     * @type {Bounds}\n     */\n    this.bounds = new Bounds();\n    /**\n     * The container to which the filter is applied.\n     * @type {Container}\n     */\n    this.container = null;\n    /**\n     * Indicates whether blending is required for the filter.\n     * @type {boolean}\n     */\n    this.blendRequired = false;\n    /**\n     * The render surface where the output of the filter is rendered.\n     * @type {RenderSurface}\n     */\n    this.outputRenderSurface = null;\n    /**\n     * The global frame of the filter area.\n     * @type {{ x: number, y: number, width: number, height: number }}\n     */\n    this.globalFrame = { x: 0, y: 0, width: 0, height: 0 };\n  }\n}\nclass FilterSystem {\n  constructor(renderer) {\n    this._filterStackIndex = 0;\n    this._filterStack = [];\n    this._filterGlobalUniforms = new UniformGroup({\n      uInputSize: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputPixel: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputClamp: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uGlobalFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputTexture: { value: new Float32Array(4), type: \"vec4<f32>\" }\n    });\n    this._globalFilterBindGroup = new BindGroup({});\n    this.renderer = renderer;\n  }\n  /**\n   * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n   * @readonly\n   */\n  get activeBackTexture() {\n    return this._activeFilterData?.backTexture;\n  }\n  /**\n   * Pushes a filter instruction onto the filter stack.\n   * @param instruction - The instruction containing the filter effect and container.\n   * @internal\n   */\n  push(instruction) {\n    const renderer = this.renderer;\n    const filters = instruction.filterEffect.filters;\n    const filterData = this._pushFilterData();\n    filterData.skip = false;\n    filterData.filters = filters;\n    filterData.container = instruction.container;\n    filterData.outputRenderSurface = renderer.renderTarget.renderSurface;\n    const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n    const rootResolution = colorTextureSource.resolution;\n    const rootAntialias = colorTextureSource.antialias;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return;\n    }\n    const bounds = filterData.bounds;\n    this._calculateFilterArea(instruction, bounds);\n    this._calculateFilterBounds(filterData, renderer.renderTarget.rootViewPort, rootAntialias, rootResolution, 1);\n    if (filterData.skip) {\n      return;\n    }\n    const previousFilterData = this._getPreviousFilterData();\n    const globalResolution = this._findFilterResolution(rootResolution);\n    let offsetX = 0;\n    let offsetY = 0;\n    if (previousFilterData) {\n      offsetX = previousFilterData.bounds.minX;\n      offsetY = previousFilterData.bounds.minY;\n    }\n    this._calculateGlobalFrame(\n      filterData,\n      offsetX,\n      offsetY,\n      globalResolution,\n      colorTextureSource.width,\n      colorTextureSource.height\n    );\n    this._setupFilterTextures(filterData, bounds, renderer, previousFilterData);\n  }\n  /**\n   * Applies filters to a texture.\n   *\n   * This method takes a texture and a list of filters, applies the filters to the texture,\n   * and returns the resulting texture.\n   * @param {object} params - The parameters for applying filters.\n   * @param {Texture} params.texture - The texture to apply filters to.\n   * @param {Filter[]} params.filters - The filters to apply.\n   * @returns {Texture} The resulting texture after all filters have been applied.\n   * @example\n   *\n   * ```ts\n   * // Create a texture and a list of filters\n   * const texture = new Texture(...);\n   * const filters = [new BlurFilter(), new ColorMatrixFilter()];\n   *\n   * // Apply the filters to the texture\n   * const resultTexture = filterSystem.applyToTexture({ texture, filters });\n   *\n   * // Use the resulting texture\n   * sprite.texture = resultTexture;\n   * ```\n   *\n   * Key Points:\n   * 1. padding is not currently supported here - so clipping may occur with filters that use padding.\n   * 2. If all filters are disabled or skipped, the original texture is returned.\n   */\n  generateFilteredTexture({ texture, filters }) {\n    const filterData = this._pushFilterData();\n    this._activeFilterData = filterData;\n    filterData.skip = false;\n    filterData.filters = filters;\n    const colorTextureSource = texture.source;\n    const rootResolution = colorTextureSource.resolution;\n    const rootAntialias = colorTextureSource.antialias;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return texture;\n    }\n    const bounds = filterData.bounds;\n    bounds.addRect(texture.frame);\n    this._calculateFilterBounds(filterData, bounds.rectangle, rootAntialias, rootResolution, 0);\n    if (filterData.skip) {\n      return texture;\n    }\n    const globalResolution = rootResolution;\n    const offsetX = 0;\n    const offsetY = 0;\n    this._calculateGlobalFrame(\n      filterData,\n      offsetX,\n      offsetY,\n      globalResolution,\n      colorTextureSource.width,\n      colorTextureSource.height\n    );\n    filterData.outputRenderSurface = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      filterData.resolution,\n      filterData.antialias\n    );\n    filterData.backTexture = Texture.EMPTY;\n    filterData.inputTexture = texture;\n    const renderer = this.renderer;\n    renderer.renderTarget.finishRenderPass();\n    this._applyFiltersToTexture(filterData, true);\n    const outputTexture = filterData.outputRenderSurface;\n    outputTexture.source.alphaMode = \"premultiplied-alpha\";\n    return outputTexture;\n  }\n  /** @internal */\n  pop() {\n    const renderer = this.renderer;\n    const filterData = this._popFilterData();\n    if (filterData.skip) {\n      return;\n    }\n    renderer.globalUniforms.pop();\n    renderer.renderTarget.finishRenderPass();\n    this._activeFilterData = filterData;\n    this._applyFiltersToTexture(filterData, false);\n    if (filterData.blendRequired) {\n      TexturePool.returnTexture(filterData.backTexture);\n    }\n    TexturePool.returnTexture(filterData.inputTexture);\n  }\n  /**\n   * Copies the last render surface to a texture.\n   * @param lastRenderSurface - The last render surface to copy from.\n   * @param bounds - The bounds of the area to copy.\n   * @param previousBounds - The previous bounds to use for offsetting the copy.\n   */\n  getBackTexture(lastRenderSurface, bounds, previousBounds) {\n    const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n    const backTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      backgroundResolution,\n      false\n    );\n    let x = bounds.minX;\n    let y = bounds.minY;\n    if (previousBounds) {\n      x -= previousBounds.minX;\n      y -= previousBounds.minY;\n    }\n    x = Math.floor(x * backgroundResolution);\n    y = Math.floor(y * backgroundResolution);\n    const width = Math.ceil(bounds.width * backgroundResolution);\n    const height = Math.ceil(bounds.height * backgroundResolution);\n    this.renderer.renderTarget.copyToTexture(\n      lastRenderSurface,\n      backTexture,\n      { x, y },\n      { width, height },\n      { x: 0, y: 0 }\n    );\n    return backTexture;\n  }\n  /**\n   * Applies a filter to a texture.\n   * @param filter - The filter to apply.\n   * @param input - The input texture.\n   * @param output - The output render surface.\n   * @param clear - Whether to clear the output surface before applying the filter.\n   */\n  applyFilter(filter, input, output, clear) {\n    const renderer = this.renderer;\n    const filterData = this._activeFilterData;\n    const outputRenderSurface = filterData.outputRenderSurface;\n    const isFinalTarget = outputRenderSurface === output;\n    const rootResolution = renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n    const resolution = this._findFilterResolution(rootResolution);\n    let offsetX = 0;\n    let offsetY = 0;\n    if (isFinalTarget) {\n      const offset = this._findPreviousFilterOffset();\n      offsetX = offset.x;\n      offsetY = offset.y;\n    }\n    this._updateFilterUniforms(input, output, filterData, offsetX, offsetY, resolution, isFinalTarget, clear);\n    this._setupBindGroupsAndRender(filter, input, renderer);\n  }\n  /**\n   * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n   *\n   * Use `outputMatrix * vTextureCoord` in the shader.\n   * @param outputMatrix - The matrix to output to.\n   * @param {Sprite} sprite - The sprite to map to.\n   * @returns The mapped matrix.\n   */\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const data = this._activeFilterData;\n    const mappedMatrix = outputMatrix.set(\n      data.inputTexture._source.width,\n      0,\n      0,\n      data.inputTexture._source.height,\n      data.bounds.minX,\n      data.bounds.minY\n    );\n    const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n    const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n    if (renderGroup && renderGroup.cacheToLocalTransform) {\n      worldTransform.prepend(renderGroup.cacheToLocalTransform);\n    }\n    worldTransform.invert();\n    mappedMatrix.prepend(worldTransform);\n    mappedMatrix.scale(\n      1 / sprite.texture.orig.width,\n      1 / sprite.texture.orig.height\n    );\n    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n    return mappedMatrix;\n  }\n  destroy() {\n  }\n  /**\n   * Sets up the bind groups and renders the filter.\n   * @param filter - The filter to apply\n   * @param input - The input texture\n   * @param renderer - The renderer instance\n   */\n  _setupBindGroupsAndRender(filter, input, renderer) {\n    if (renderer.renderPipes.uniformBatch) {\n      const batchUniforms = renderer.renderPipes.uniformBatch.getUboResource(this._filterGlobalUniforms);\n      this._globalFilterBindGroup.setResource(batchUniforms, 0);\n    } else {\n      this._globalFilterBindGroup.setResource(this._filterGlobalUniforms, 0);\n    }\n    this._globalFilterBindGroup.setResource(input.source, 1);\n    this._globalFilterBindGroup.setResource(input.source.style, 2);\n    filter.groups[0] = this._globalFilterBindGroup;\n    renderer.encoder.draw({\n      geometry: quadGeometry,\n      shader: filter,\n      state: filter._state,\n      topology: \"triangle-list\"\n    });\n    if (renderer.type === RendererType.WEBGL) {\n      renderer.renderTarget.finishRenderPass();\n    }\n  }\n  /**\n   * Sets up the filter textures including input texture and back texture if needed.\n   * @param filterData - The filter data to update\n   * @param bounds - The bounds for the texture\n   * @param renderer - The renderer instance\n   * @param previousFilterData - The previous filter data for back texture calculation\n   */\n  _setupFilterTextures(filterData, bounds, renderer, previousFilterData) {\n    filterData.backTexture = Texture.EMPTY;\n    if (filterData.blendRequired) {\n      renderer.renderTarget.finishRenderPass();\n      const renderTarget = renderer.renderTarget.getRenderTarget(filterData.outputRenderSurface);\n      filterData.backTexture = this.getBackTexture(renderTarget, bounds, previousFilterData?.bounds);\n    }\n    filterData.inputTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      filterData.resolution,\n      filterData.antialias\n    );\n    renderer.renderTarget.bind(filterData.inputTexture, true);\n    renderer.globalUniforms.push({\n      offset: bounds\n    });\n  }\n  /**\n   * Calculates and sets the global frame for the filter.\n   * @param filterData - The filter data to update\n   * @param offsetX - The X offset\n   * @param offsetY - The Y offset\n   * @param globalResolution - The global resolution\n   * @param sourceWidth - The source texture width\n   * @param sourceHeight - The source texture height\n   */\n  _calculateGlobalFrame(filterData, offsetX, offsetY, globalResolution, sourceWidth, sourceHeight) {\n    const globalFrame = filterData.globalFrame;\n    globalFrame.x = offsetX * globalResolution;\n    globalFrame.y = offsetY * globalResolution;\n    globalFrame.width = sourceWidth * globalResolution;\n    globalFrame.height = sourceHeight * globalResolution;\n  }\n  /**\n   * Updates the filter uniforms with the current filter state.\n   * @param input - The input texture\n   * @param output - The output render surface\n   * @param filterData - The current filter data\n   * @param offsetX - The X offset for positioning\n   * @param offsetY - The Y offset for positioning\n   * @param resolution - The current resolution\n   * @param isFinalTarget - Whether this is the final render target\n   * @param clear - Whether to clear the output surface\n   */\n  _updateFilterUniforms(input, output, filterData, offsetX, offsetY, resolution, isFinalTarget, clear) {\n    const uniforms = this._filterGlobalUniforms.uniforms;\n    const outputFrame = uniforms.uOutputFrame;\n    const inputSize = uniforms.uInputSize;\n    const inputPixel = uniforms.uInputPixel;\n    const inputClamp = uniforms.uInputClamp;\n    const globalFrame = uniforms.uGlobalFrame;\n    const outputTexture = uniforms.uOutputTexture;\n    if (isFinalTarget) {\n      outputFrame[0] = filterData.bounds.minX - offsetX;\n      outputFrame[1] = filterData.bounds.minY - offsetY;\n    } else {\n      outputFrame[0] = 0;\n      outputFrame[1] = 0;\n    }\n    outputFrame[2] = input.frame.width;\n    outputFrame[3] = input.frame.height;\n    inputSize[0] = input.source.width;\n    inputSize[1] = input.source.height;\n    inputSize[2] = 1 / inputSize[0];\n    inputSize[3] = 1 / inputSize[1];\n    inputPixel[0] = input.source.pixelWidth;\n    inputPixel[1] = input.source.pixelHeight;\n    inputPixel[2] = 1 / inputPixel[0];\n    inputPixel[3] = 1 / inputPixel[1];\n    inputClamp[0] = 0.5 * inputPixel[2];\n    inputClamp[1] = 0.5 * inputPixel[3];\n    inputClamp[2] = input.frame.width * inputSize[2] - 0.5 * inputPixel[2];\n    inputClamp[3] = input.frame.height * inputSize[3] - 0.5 * inputPixel[3];\n    const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n    globalFrame[0] = offsetX * resolution;\n    globalFrame[1] = offsetY * resolution;\n    globalFrame[2] = rootTexture.source.width * resolution;\n    globalFrame[3] = rootTexture.source.height * resolution;\n    if (output instanceof Texture)\n      output.source.resource = null;\n    const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n    this.renderer.renderTarget.bind(output, !!clear);\n    if (output instanceof Texture) {\n      outputTexture[0] = output.frame.width;\n      outputTexture[1] = output.frame.height;\n    } else {\n      outputTexture[0] = renderTarget.width;\n      outputTexture[1] = renderTarget.height;\n    }\n    outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n    this._filterGlobalUniforms.update();\n  }\n  /**\n   * Finds the correct resolution by looking back through the filter stack.\n   * @param rootResolution - The fallback root resolution to use\n   * @returns The resolution from the previous filter or root resolution\n   */\n  _findFilterResolution(rootResolution) {\n    let currentIndex = this._filterStackIndex - 1;\n    while (currentIndex > 0 && this._filterStack[currentIndex].skip) {\n      --currentIndex;\n    }\n    return currentIndex > 0 && this._filterStack[currentIndex].inputTexture ? this._filterStack[currentIndex].inputTexture.source._resolution : rootResolution;\n  }\n  /**\n   * Finds the offset from the previous non-skipped filter in the stack.\n   * @returns The offset coordinates from the previous filter\n   */\n  _findPreviousFilterOffset() {\n    let offsetX = 0;\n    let offsetY = 0;\n    let lastIndex = this._filterStackIndex;\n    while (lastIndex > 0) {\n      lastIndex--;\n      const prevFilterData = this._filterStack[lastIndex];\n      if (!prevFilterData.skip) {\n        offsetX = prevFilterData.bounds.minX;\n        offsetY = prevFilterData.bounds.minY;\n        break;\n      }\n    }\n    return { x: offsetX, y: offsetY };\n  }\n  /**\n   * Calculates the filter area bounds based on the instruction type.\n   * @param instruction - The filter instruction\n   * @param bounds - The bounds object to populate\n   */\n  _calculateFilterArea(instruction, bounds) {\n    if (instruction.renderables) {\n      getGlobalRenderableBounds(instruction.renderables, bounds);\n    } else if (instruction.filterEffect.filterArea) {\n      bounds.clear();\n      bounds.addRect(instruction.filterEffect.filterArea);\n      bounds.applyMatrix(instruction.container.worldTransform);\n    } else {\n      instruction.container.getFastGlobalBounds(true, bounds);\n    }\n    if (instruction.container) {\n      const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n      const filterFrameTransform = renderGroup.cacheToLocalTransform;\n      if (filterFrameTransform) {\n        bounds.applyMatrix(filterFrameTransform);\n      }\n    }\n  }\n  _applyFiltersToTexture(filterData, clear) {\n    const inputTexture = filterData.inputTexture;\n    const bounds = filterData.bounds;\n    const filters = filterData.filters;\n    this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n    this._globalFilterBindGroup.setResource(filterData.backTexture.source, 3);\n    if (filters.length === 1) {\n      filters[0].apply(this, inputTexture, filterData.outputRenderSurface, clear);\n    } else {\n      let flip = filterData.inputTexture;\n      const tempTexture = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        flip.source._resolution,\n        false\n      );\n      let flop = tempTexture;\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        const filter = filters[i];\n        filter.apply(this, flip, flop, true);\n        const t = flip;\n        flip = flop;\n        flop = t;\n      }\n      filters[i].apply(this, flip, filterData.outputRenderSurface, clear);\n      TexturePool.returnTexture(tempTexture);\n    }\n  }\n  _calculateFilterBounds(filterData, viewPort, rootAntialias, rootResolution, paddingMultiplier) {\n    const renderer = this.renderer;\n    const bounds = filterData.bounds;\n    const filters = filterData.filters;\n    let resolution = Infinity;\n    let padding = 0;\n    let antialias = true;\n    let blendRequired = false;\n    let enabled = false;\n    let clipToViewport = true;\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution === \"inherit\" ? rootResolution : filter.resolution);\n      padding += filter.padding;\n      if (filter.antialias === \"off\") {\n        antialias = false;\n      } else if (filter.antialias === \"inherit\") {\n        antialias && (antialias = rootAntialias);\n      }\n      if (!filter.clipToViewport) {\n        clipToViewport = false;\n      }\n      const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n      if (!isCompatible) {\n        enabled = false;\n        break;\n      }\n      if (filter.blendRequired && !(renderer.backBuffer?.useBackBuffer ?? true)) {\n        warn(\"Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.\");\n        enabled = false;\n        break;\n      }\n      enabled = filter.enabled || enabled;\n      blendRequired || (blendRequired = filter.blendRequired);\n    }\n    if (!enabled) {\n      filterData.skip = true;\n      return;\n    }\n    if (clipToViewport) {\n      bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n    }\n    bounds.scale(resolution).ceil().scale(1 / resolution).pad((padding | 0) * paddingMultiplier);\n    if (!bounds.isPositive) {\n      filterData.skip = true;\n      return;\n    }\n    filterData.antialias = antialias;\n    filterData.resolution = resolution;\n    filterData.blendRequired = blendRequired;\n  }\n  _popFilterData() {\n    this._filterStackIndex--;\n    return this._filterStack[this._filterStackIndex];\n  }\n  _getPreviousFilterData() {\n    let previousFilterData;\n    let index = this._filterStackIndex - 1;\n    while (index > 1) {\n      index--;\n      previousFilterData = this._filterStack[index];\n      if (!previousFilterData.skip) {\n        break;\n      }\n    }\n    return previousFilterData;\n  }\n  _pushFilterData() {\n    let filterData = this._filterStack[this._filterStackIndex];\n    if (!filterData) {\n      filterData = this._filterStack[this._filterStackIndex] = new FilterData();\n    }\n    this._filterStackIndex++;\n    return filterData;\n  }\n}\n/** @ignore */\nFilterSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"filter\"\n};\n\nexport { FilterSystem };\n//# sourceMappingURL=FilterSystem.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst _MeshGeometry = class _MeshGeometry extends Geometry {\n  constructor(...args) {\n    let options = args[0] ?? {};\n    if (options instanceof Float32Array) {\n      deprecation(v8_0_0, \"use new MeshGeometry({ positions, uvs, indices }) instead\");\n      options = {\n        positions: options,\n        uvs: args[1],\n        indices: args[2]\n      };\n    }\n    options = { ..._MeshGeometry.defaultOptions, ...options };\n    const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    let uvs = options.uvs;\n    if (!uvs) {\n      if (options.positions) {\n        uvs = new Float32Array(positions.length);\n      } else {\n        uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n      }\n    }\n    const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n    const shrinkToFit = options.shrinkBuffersToFit;\n    const positionBuffer = new Buffer({\n      data: positions,\n      label: \"attribute-mesh-positions\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const uvBuffer = new Buffer({\n      data: uvs,\n      label: \"attribute-mesh-uvs\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const indexBuffer = new Buffer({\n      data: indices,\n      label: \"index-mesh-buffer\",\n      shrinkToFit,\n      usage: BufferUsage.INDEX | BufferUsage.COPY_DST\n    });\n    super({\n      attributes: {\n        aPosition: {\n          buffer: positionBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        },\n        aUV: {\n          buffer: uvBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        }\n      },\n      indexBuffer,\n      topology: options.topology\n    });\n    this.batchMode = \"auto\";\n  }\n  /** The positions of the mesh. */\n  get positions() {\n    return this.attributes.aPosition.buffer.data;\n  }\n  /**\n   * Set the positions of the mesh.\n   * When setting the positions, its important that the uvs array is at least as long as the positions array.\n   * otherwise the geometry will not be valid.\n   * @param {Float32Array} value - The positions of the mesh.\n   */\n  set positions(value) {\n    this.attributes.aPosition.buffer.data = value;\n  }\n  /** The UVs of the mesh. */\n  get uvs() {\n    return this.attributes.aUV.buffer.data;\n  }\n  /**\n   * Set the UVs of the mesh.\n   * Its important that the uvs array you set is at least as long as the positions array.\n   * otherwise the geometry will not be valid.\n   * @param {Float32Array} value - The UVs of the mesh.\n   */\n  set uvs(value) {\n    this.attributes.aUV.buffer.data = value;\n  }\n  /** The indices of the mesh. */\n  get indices() {\n    return this.indexBuffer.data;\n  }\n  set indices(value) {\n    this.indexBuffer.data = value;\n  }\n};\n_MeshGeometry.defaultOptions = {\n  topology: \"triangle-list\",\n  shrinkBuffersToFit: false\n};\nlet MeshGeometry = _MeshGeometry;\n\nexport { MeshGeometry };\n//# sourceMappingURL=MeshGeometry.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nconst nssvg = \"http://www.w3.org/2000/svg\";\nconst nsxhtml = \"http://www.w3.org/1999/xhtml\";\nclass HTMLTextRenderData {\n  constructor() {\n    this.svgRoot = document.createElementNS(nssvg, \"svg\");\n    this.foreignObject = document.createElementNS(nssvg, \"foreignObject\");\n    this.domElement = document.createElementNS(nsxhtml, \"div\");\n    this.styleElement = document.createElementNS(nsxhtml, \"style\");\n    const { foreignObject, svgRoot, styleElement, domElement } = this;\n    foreignObject.setAttribute(\"width\", \"10000\");\n    foreignObject.setAttribute(\"height\", \"10000\");\n    foreignObject.style.overflow = \"hidden\";\n    svgRoot.appendChild(foreignObject);\n    foreignObject.appendChild(styleElement);\n    foreignObject.appendChild(domElement);\n    this.image = DOMAdapter.get().createImage();\n  }\n}\n\nexport { HTMLTextRenderData };\n//# sourceMappingURL=HTMLTextRenderData.mjs.map\n","import { HTMLTextRenderData } from '../HTMLTextRenderData.mjs';\n\n\"use strict\";\nlet tempHTMLTextRenderData;\nfunction measureHtmlText(text, style, fontStyleCSS, htmlTextRenderData) {\n  htmlTextRenderData || (htmlTextRenderData = tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData()));\n  const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n  domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n  domElement.setAttribute(\"style\", \"transform-origin: top left; display: inline-block\");\n  if (fontStyleCSS) {\n    styleElement.textContent = fontStyleCSS;\n  }\n  document.body.appendChild(svgRoot);\n  const contentBounds = domElement.getBoundingClientRect();\n  svgRoot.remove();\n  const doublePadding = style.padding * 2;\n  return {\n    width: contentBounds.width - doublePadding,\n    height: contentBounds.height - doublePadding\n  };\n}\n\nexport { measureHtmlText };\n//# sourceMappingURL=measureHtmlText.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../gpu/colorToUniform.mjs';\nimport { BatchableGraphics } from './BatchableGraphics.mjs';\n\n\"use strict\";\nclass GraphicsGpuData {\n  constructor() {\n    this.batches = [];\n    this.batched = false;\n  }\n  destroy() {\n    this.batches.forEach((batch) => {\n      BigPool.return(batch);\n    });\n    this.batches.length = 0;\n  }\n}\nclass GraphicsPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this.renderer.runners.contextChange.add(this);\n  }\n  contextChange() {\n    this._adaptor.contextChange(this.renderer);\n  }\n  validateRenderable(graphics) {\n    const context = graphics.context;\n    const wasBatched = !!graphics._gpuData;\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n    if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(graphics, instructionSet) {\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (graphics.didViewUpdate) {\n      this._rebuild(graphics);\n    }\n    if (gpuContext.isBatchable) {\n      this._addToBatcher(graphics, instructionSet);\n    } else {\n      this.renderer.renderPipes.batch.break(instructionSet);\n      instructionSet.add(graphics);\n    }\n  }\n  updateRenderable(graphics) {\n    const gpuData = this._getGpuDataForRenderable(graphics);\n    const batches = gpuData.batches;\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batch._batcher.updateElement(batch);\n    }\n  }\n  execute(graphics) {\n    if (!graphics.isRenderable)\n      return;\n    const renderer = this.renderer;\n    const context = graphics.context;\n    const contextSystem = renderer.graphicsContext;\n    if (!contextSystem.getGpuContext(context).batches.length) {\n      return;\n    }\n    const shader = context.customShader || this._adaptor.shader;\n    this.state.blendMode = graphics.groupBlendMode;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = graphics.groupTransform;\n    localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n    color32BitToUniform(\n      graphics.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, graphics);\n  }\n  _rebuild(graphics) {\n    const gpuData = this._getGpuDataForRenderable(graphics);\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    gpuData.destroy();\n    if (gpuContext.isBatchable) {\n      this._updateBatchesForRenderable(graphics, gpuData);\n    }\n  }\n  _addToBatcher(graphics, instructionSet) {\n    const batchPipe = this.renderer.renderPipes.batch;\n    const batches = this._getGpuDataForRenderable(graphics).batches;\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batchPipe.addToBatch(batch, instructionSet);\n    }\n  }\n  _getGpuDataForRenderable(graphics) {\n    return graphics._gpuData[this.renderer.uid] || this._initGpuDataForRenderable(graphics);\n  }\n  _initGpuDataForRenderable(graphics) {\n    const gpuData = new GraphicsGpuData();\n    graphics._gpuData[this.renderer.uid] = gpuData;\n    return gpuData;\n  }\n  _updateBatchesForRenderable(graphics, gpuData) {\n    const context = graphics.context;\n    const gpuContext = this.renderer.graphicsContext.getGpuContext(context);\n    const roundPixels = this.renderer._roundPixels | graphics._roundPixels;\n    gpuData.batches = gpuContext.batches.map((batch) => {\n      const batchClone = BigPool.get(BatchableGraphics);\n      batch.copyTo(batchClone);\n      batchClone.renderable = graphics;\n      batchClone.roundPixels = roundPixels;\n      return batchClone;\n    });\n  }\n  destroy() {\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.state = null;\n  }\n}\n/** @ignore */\nGraphicsPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"graphics\"\n};\n\nexport { GraphicsGpuData, GraphicsPipe };\n//# sourceMappingURL=GraphicsPipe.mjs.map\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nconst _PlaneGeometry = class _PlaneGeometry extends MeshGeometry {\n  constructor(...args) {\n    super({});\n    let options = args[0] ?? {};\n    if (typeof options === \"number\") {\n      deprecation(v8_0_0, \"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead\");\n      options = {\n        width: options,\n        height: args[1],\n        verticesX: args[2],\n        verticesY: args[3]\n      };\n    }\n    this.build(options);\n  }\n  /**\n   * Refreshes plane coordinates\n   * @param options - Options to be applied to plane geometry\n   */\n  build(options) {\n    options = { ..._PlaneGeometry.defaultOptions, ...options };\n    this.verticesX = this.verticesX ?? options.verticesX;\n    this.verticesY = this.verticesY ?? options.verticesY;\n    this.width = this.width ?? options.width;\n    this.height = this.height ?? options.height;\n    const total = this.verticesX * this.verticesY;\n    const verts = [];\n    const uvs = [];\n    const indices = [];\n    const verticesX = this.verticesX - 1;\n    const verticesY = this.verticesY - 1;\n    const sizeX = this.width / verticesX;\n    const sizeY = this.height / verticesY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.verticesX;\n      const y = i / this.verticesX | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / verticesX, y / verticesY);\n    }\n    const totalSub = verticesX * verticesY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % verticesX;\n      const ypos = i / verticesX | 0;\n      const value = ypos * this.verticesX + xpos;\n      const value2 = ypos * this.verticesX + xpos + 1;\n      const value3 = (ypos + 1) * this.verticesX + xpos;\n      const value4 = (ypos + 1) * this.verticesX + xpos + 1;\n      indices.push(\n        value,\n        value2,\n        value3,\n        value2,\n        value4,\n        value3\n      );\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint32Array(indices);\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  }\n};\n_PlaneGeometry.defaultOptions = {\n  width: 100,\n  height: 100,\n  verticesX: 10,\n  verticesY: 10\n};\nlet PlaneGeometry = _PlaneGeometry;\n\nexport { PlaneGeometry };\n//# sourceMappingURL=PlaneGeometry.mjs.map\n","\"use strict\";\nclass BatchableMesh {\n  constructor() {\n    this.batcherName = \"default\";\n    this.packAsQuad = false;\n    this.indexOffset = 0;\n    this.attributeOffset = 0;\n    this.roundPixels = 0;\n    this._batcher = null;\n    this._batch = null;\n    this._textureMatrixUpdateId = -1;\n    this._uvUpdateId = -1;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get topology() {\n    return this._topology || this.geometry.topology;\n  }\n  set topology(value) {\n    this._topology = value;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.geometry = null;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  /**\n   * Sets the texture for the batchable mesh.\n   * As it does so, it resets the texture matrix update ID.\n   * this is to ensure that the texture matrix is recalculated when the uvs are referenced\n   * @param value - The texture to set.\n   */\n  setTexture(value) {\n    if (this.texture === value)\n      return;\n    this.texture = value;\n    this._textureMatrixUpdateId = -1;\n  }\n  get uvs() {\n    const geometry = this.geometry;\n    const uvBuffer = geometry.getBuffer(\"aUV\");\n    const uvs = uvBuffer.data;\n    let transformedUvs = uvs;\n    const textureMatrix = this.texture.textureMatrix;\n    if (!textureMatrix.isSimple) {\n      transformedUvs = this._transformedUvs;\n      if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID) {\n        if (!transformedUvs || transformedUvs.length < uvs.length) {\n          transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n        }\n        this._textureMatrixUpdateId = textureMatrix._updateID;\n        this._uvUpdateId = uvBuffer._updateID;\n        textureMatrix.multiplyUvs(uvs, transformedUvs);\n      }\n    }\n    return transformedUvs;\n  }\n  get positions() {\n    return this.geometry.positions;\n  }\n  get indices() {\n    return this.geometry.indices;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  get groupTransform() {\n    return this.renderable.groupTransform;\n  }\n  get attributeSize() {\n    return this.geometry.positions.length / 2;\n  }\n  get indexSize() {\n    return this.geometry.indices.length;\n  }\n}\n\nexport { BatchableMesh };\n//# sourceMappingURL=BatchableMesh.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from './BatchableMesh.mjs';\n\n\"use strict\";\nclass MeshGpuData {\n  destroy() {\n  }\n}\nclass MeshPipe {\n  constructor(renderer, adaptor) {\n    this.localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this.localUniformsBindGroup = new BindGroup({\n      0: this.localUniforms\n    });\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n  }\n  validateRenderable(mesh) {\n    const meshData = this._getMeshData(mesh);\n    const wasBatched = meshData.batched;\n    const isBatched = mesh.batched;\n    meshData.batched = isBatched;\n    if (wasBatched !== isBatched) {\n      return true;\n    } else if (isBatched) {\n      const geometry = mesh._geometry;\n      if (geometry.indices.length !== meshData.indexSize || geometry.positions.length !== meshData.vertexSize) {\n        meshData.indexSize = geometry.indices.length;\n        meshData.vertexSize = geometry.positions.length;\n        return true;\n      }\n      const batchableMesh = this._getBatchableMesh(mesh);\n      if (batchableMesh.texture.uid !== mesh._texture.uid) {\n        batchableMesh._textureMatrixUpdateId = -1;\n      }\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        mesh._texture\n      );\n    }\n    return false;\n  }\n  addRenderable(mesh, instructionSet) {\n    const batcher = this.renderer.renderPipes.batch;\n    const meshData = this._getMeshData(mesh);\n    if (mesh.didViewUpdate) {\n      meshData.indexSize = mesh._geometry.indices?.length;\n      meshData.vertexSize = mesh._geometry.positions?.length;\n    }\n    if (meshData.batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      batcher.addToBatch(gpuBatchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      instructionSet.add(mesh);\n    }\n  }\n  updateRenderable(mesh) {\n    if (mesh.batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n    }\n  }\n  execute(mesh) {\n    if (!mesh.isRenderable)\n      return;\n    mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n    const localUniforms = this.localUniforms;\n    localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n    localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n    localUniforms.update();\n    color32BitToUniform(\n      mesh.groupColorAlpha,\n      localUniforms.uniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, mesh);\n  }\n  _getMeshData(mesh) {\n    var _a, _b;\n    (_a = mesh._gpuData)[_b = this.renderer.uid] || (_a[_b] = new MeshGpuData());\n    return mesh._gpuData[this.renderer.uid].meshData || this._initMeshData(mesh);\n  }\n  _initMeshData(mesh) {\n    mesh._gpuData[this.renderer.uid].meshData = {\n      batched: mesh.batched,\n      indexSize: 0,\n      vertexSize: 0\n    };\n    return mesh._gpuData[this.renderer.uid].meshData;\n  }\n  _getBatchableMesh(mesh) {\n    var _a, _b;\n    (_a = mesh._gpuData)[_b = this.renderer.uid] || (_a[_b] = new MeshGpuData());\n    return mesh._gpuData[this.renderer.uid].batchableMesh || this._initBatchableMesh(mesh);\n  }\n  _initBatchableMesh(mesh) {\n    const gpuMesh = new BatchableMesh();\n    gpuMesh.renderable = mesh;\n    gpuMesh.setTexture(mesh._texture);\n    gpuMesh.transform = mesh.groupTransform;\n    gpuMesh.roundPixels = this.renderer._roundPixels | mesh._roundPixels;\n    mesh._gpuData[this.renderer.uid].batchableMesh = gpuMesh;\n    return gpuMesh;\n  }\n  destroy() {\n    this.localUniforms = null;\n    this.localUniformsBindGroup = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.renderer = null;\n  }\n}\n/** @ignore */\nMeshPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"mesh\"\n};\n\nexport { MeshGpuData, MeshPipe };\n//# sourceMappingURL=MeshPipe.mjs.map\n","\"use strict\";\nclass GlParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const state = particleContainerPipe.state;\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.resources.uTexture = container.texture._source;\n    shader.resources.uniforms = particleContainerPipe.localUniforms;\n    const gl = renderer.gl;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.shader.bind(shader);\n    renderer.state.set(state);\n    renderer.geometry.bind(buffer.geometry, shader.glProgram);\n    const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n    const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n    gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n  }\n}\n\nexport { GlParticleContainerAdaptor };\n//# sourceMappingURL=GlParticleContainerAdaptor.mjs.map\n","\"use strict\";\nclass GpuParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n    shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n    const state = particleContainerPipe.state;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.encoder.draw({\n      geometry: buffer.geometry,\n      shader: container.shader || particleContainerPipe.defaultShader,\n      state,\n      size: container.particleChildren.length * 6\n    });\n  }\n}\n\nexport { GpuParticleContainerAdaptor };\n//# sourceMappingURL=GpuParticleContainerAdaptor.mjs.map\n","\"use strict\";\nfunction createIndicesForQuads(size, outBuffer = null) {\n  const totalIndices = size * 6;\n  if (totalIndices > 65535) {\n    outBuffer || (outBuffer = new Uint32Array(totalIndices));\n  } else {\n    outBuffer || (outBuffer = new Uint16Array(totalIndices));\n  }\n  if (outBuffer.length !== totalIndices) {\n    throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n  }\n  for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4) {\n    outBuffer[i + 0] = j + 0;\n    outBuffer[i + 1] = j + 1;\n    outBuffer[i + 2] = j + 2;\n    outBuffer[i + 3] = j + 0;\n    outBuffer[i + 4] = j + 2;\n    outBuffer[i + 5] = j + 3;\n  }\n  return outBuffer;\n}\n\nexport { createIndicesForQuads };\n//# sourceMappingURL=createIndicesForQuads.mjs.map\n","import { getAttributeInfoFromFormat } from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction generateParticleUpdateFunction(properties) {\n  return {\n    dynamicUpdate: generateUpdateFunction(properties, true),\n    staticUpdate: generateUpdateFunction(properties, false)\n  };\n}\nfunction generateUpdateFunction(properties, dynamic) {\n  const funcFragments = [];\n  funcFragments.push(`\n\n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n  let offset = 0;\n  for (const i in properties) {\n    const property = properties[i];\n    if (dynamic !== property.dynamic)\n      continue;\n    funcFragments.push(`offset = index + ${offset}`);\n    funcFragments.push(property.code);\n    const attributeInfo = getAttributeInfoFromFormat(property.format);\n    offset += attributeInfo.stride / 4;\n  }\n  funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n  funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n  const functionSource = funcFragments.join(\"\\n\");\n  return new Function(\"ps\", \"f32v\", \"u32v\", functionSource);\n}\n\nexport { generateParticleUpdateFunction };\n//# sourceMappingURL=generateParticleUpdateFunction.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer.mjs';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads.mjs';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction.mjs';\n\n\"use strict\";\nclass ParticleBuffer {\n  constructor(options) {\n    this._size = 0;\n    this._generateParticleUpdateCache = {};\n    const size = this._size = options.size ?? 1e3;\n    const properties = options.properties;\n    let staticVertexSize = 0;\n    let dynamicVertexSize = 0;\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        dynamicVertexSize += attributeInfo.stride;\n      } else {\n        staticVertexSize += attributeInfo.stride;\n      }\n    }\n    this._dynamicStride = dynamicVertexSize / 4;\n    this._staticStride = staticVertexSize / 4;\n    this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n    this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n    this.indexBuffer = createIndicesForQuads(size);\n    const geometry = new Geometry();\n    let dynamicOffset = 0;\n    let staticOffset = 0;\n    this._staticBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"static-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    this._dynamicBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"dynamic-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._dynamicBuffer,\n          stride: this._dynamicStride * 4,\n          offset: dynamicOffset * 4,\n          format: property.format\n        });\n        dynamicOffset += attributeInfo.size;\n      } else {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._staticBuffer,\n          stride: this._staticStride * 4,\n          offset: staticOffset * 4,\n          format: property.format\n        });\n        staticOffset += attributeInfo.size;\n      }\n    }\n    geometry.addIndex(this.indexBuffer);\n    const uploadFunction = this.getParticleUpdate(properties);\n    this._dynamicUpload = uploadFunction.dynamicUpdate;\n    this._staticUpload = uploadFunction.staticUpdate;\n    this.geometry = geometry;\n  }\n  getParticleUpdate(properties) {\n    const key = getParticleSyncKey(properties);\n    if (this._generateParticleUpdateCache[key]) {\n      return this._generateParticleUpdateCache[key];\n    }\n    this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n    return this._generateParticleUpdateCache[key];\n  }\n  generateParticleUpdate(properties) {\n    return generateParticleUpdateFunction(properties);\n  }\n  update(particles, uploadStatic) {\n    if (particles.length > this._size) {\n      uploadStatic = true;\n      this._size = Math.max(particles.length, this._size * 1.5 | 0);\n      this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n      this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n      this.indexBuffer = createIndicesForQuads(this._size);\n      this.geometry.indexBuffer.setDataWithSize(\n        this.indexBuffer,\n        this.indexBuffer.byteLength,\n        true\n      );\n    }\n    const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n    this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n    this._dynamicBuffer.setDataWithSize(\n      this.dynamicAttributeBuffer.float32View,\n      particles.length * this._dynamicStride * 4,\n      true\n    );\n    if (uploadStatic) {\n      const staticAttributeBuffer = this.staticAttributeBuffer;\n      this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n      this._staticBuffer.setDataWithSize(\n        staticAttributeBuffer.float32View,\n        particles.length * this._staticStride * 4,\n        true\n      );\n    }\n  }\n  destroy() {\n    this._staticBuffer.destroy();\n    this._dynamicBuffer.destroy();\n    this.geometry.destroy();\n  }\n}\nfunction getParticleSyncKey(properties) {\n  const keyGen = [];\n  for (const key in properties) {\n    const property = properties[key];\n    keyGen.push(key, property.code, property.dynamic ? \"d\" : \"s\");\n  }\n  return keyGen.join(\"_\");\n}\n\nexport { ParticleBuffer };\n//# sourceMappingURL=ParticleBuffer.mjs.map\n","var fragment = \"varying vec2 vUV;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uTexture;\\n\\nvoid main(void){\\n    vec4 color = texture2D(uTexture, vUV) * vColor;\\n    gl_FragColor = color;\\n}\";\n\nexport { fragment as default };\n//# sourceMappingURL=particles.frag.mjs.map\n","var vertex = \"attribute vec2 aVertex;\\nattribute vec2 aUV;\\nattribute vec4 aColor;\\n\\nattribute vec2 aPosition;\\nattribute float aRotation;\\n\\nuniform mat3 uTranslationMatrix;\\nuniform float uRound;\\nuniform vec2 uResolution;\\nuniform vec4 uColor;\\n\\nvarying vec2 vUV;\\nvarying vec4 vColor;\\n\\nvec2 roundPixels(vec2 position, vec2 targetSize)\\n{       \\n    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\\n}\\n\\nvoid main(void){\\n    float cosRotation = cos(aRotation);\\n    float sinRotation = sin(aRotation);\\n    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;\\n    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;\\n\\n    vec2 v = vec2(x, y);\\n    v = v + aPosition;\\n\\n    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    if(uRound == 1.0)\\n    {\\n        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\\n    }\\n\\n    vUV = aUV;\\n    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=particles.vert.mjs.map\n","var wgsl = \"\\nstruct ParticleUniforms {\\n  uProjectionMatrix:mat3x3<f32>,\\n  uColor:vec4<f32>,\\n  uResolution:vec2<f32>,\\n  uRoundPixels:f32,\\n};\\n\\n@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;\\n\\n@group(1) @binding(0) var uTexture: texture_2d<f32>;\\n@group(1) @binding(1) var uSampler : sampler;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) color : vec4<f32>,\\n  };\\n@vertex\\nfn mainVertex(\\n  @location(0) aVertex: vec2<f32>,\\n  @location(1) aPosition: vec2<f32>,\\n  @location(2) aUV: vec2<f32>,\\n  @location(3) aColor: vec4<f32>,\\n  @location(4) aRotation: f32,\\n) -> VSOutput {\\n  \\n   let v = vec2(\\n       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),\\n       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)\\n   ) + aPosition;\\n\\n   let position = vec4((uniforms.uProjectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;\\n\\n  return VSOutput(\\n   position,\\n   aUV,\\n   vColor,\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) color: vec4<f32>,\\n  @builtin(position) position: vec4<f32>,\\n) -> @location(0) vec4<f32> {\\n\\n    var sample = textureSample(uTexture, uSampler, uv) * color;\\n   \\n    return sample;\\n}\";\n\nexport { wgsl as default };\n//# sourceMappingURL=particles.wgsl.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport fragment from './particles.frag.mjs';\nimport vertex from './particles.vert.mjs';\nimport wgsl from './particles.wgsl.mjs';\n\n\"use strict\";\nclass ParticleShader extends Shader {\n  constructor() {\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment\n    });\n    const gpuProgram = GpuProgram.from({\n      fragment: {\n        source: wgsl,\n        entryPoint: \"mainFragment\"\n      },\n      vertex: {\n        source: wgsl,\n        entryPoint: \"mainVertex\"\n      }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        // this will be replaced with the texture from the particle container\n        uTexture: Texture.WHITE.source,\n        // this will be replaced with the texture style from the particle container\n        uSampler: new TextureStyle({}),\n        // this will be replaced with the local uniforms from the particle container\n        uniforms: {\n          uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Color(16777215), type: \"vec4<f32>\" },\n          uRound: { value: 1, type: \"f32\" },\n          uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n        }\n      }\n    });\n  }\n}\n\nexport { ParticleShader };\n//# sourceMappingURL=ParticleShader.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { ParticleBuffer } from './ParticleBuffer.mjs';\nimport { ParticleShader } from './shader/ParticleShader.mjs';\n\n\"use strict\";\nclass ParticleContainerPipe {\n  /**\n   * @param renderer - The renderer this sprite batch works for.\n   * @param adaptor\n   */\n  constructor(renderer, adaptor) {\n    /** @internal */\n    this.state = State.for2d();\n    /** Local uniforms that are used for rendering particles. */\n    this.localUniforms = new UniformGroup({\n      uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uRound: { value: 1, type: \"f32\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    });\n    this.renderer = renderer;\n    this.adaptor = adaptor;\n    this.defaultShader = new ParticleShader();\n    this.state = State.for2d();\n  }\n  validateRenderable(_renderable) {\n    return false;\n  }\n  addRenderable(renderable, instructionSet) {\n    this.renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderable);\n  }\n  getBuffers(renderable) {\n    return renderable._gpuData[this.renderer.uid] || this._initBuffer(renderable);\n  }\n  _initBuffer(renderable) {\n    renderable._gpuData[this.renderer.uid] = new ParticleBuffer({\n      size: renderable.particleChildren.length,\n      properties: renderable._properties\n    });\n    return renderable._gpuData[this.renderer.uid];\n  }\n  updateRenderable(_renderable) {\n  }\n  execute(container) {\n    const children = container.particleChildren;\n    if (children.length === 0) {\n      return;\n    }\n    const renderer = this.renderer;\n    const buffer = this.getBuffers(container);\n    container.texture || (container.texture = children[0].texture);\n    const state = this.state;\n    buffer.update(children, container._childrenDirty);\n    container._childrenDirty = false;\n    state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n    const uniforms = this.localUniforms.uniforms;\n    const transformationMatrix = uniforms.uTranslationMatrix;\n    container.worldTransform.copyTo(transformationMatrix);\n    transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n    uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n    uniforms.uRound = renderer._roundPixels | container._roundPixels;\n    color32BitToUniform(\n      container.groupColorAlpha,\n      uniforms.uColor,\n      0\n    );\n    this.adaptor.execute(this, container);\n  }\n  /** Destroys the ParticleRenderer. */\n  destroy() {\n    if (this.defaultShader) {\n      this.defaultShader.destroy();\n      this.defaultShader = null;\n    }\n  }\n}\n\nexport { ParticleContainerPipe };\n//# sourceMappingURL=ParticleContainerPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GlParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GlParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGlParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GlParticleContainerPipe };\n//# sourceMappingURL=GlParticleContainerPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GpuParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GpuParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGpuParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGPUPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GpuParticleContainerPipe };\n//# sourceMappingURL=GpuParticleContainerPipe.mjs.map\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry.mjs';\n\n\"use strict\";\nconst _NineSliceGeometry = class _NineSliceGeometry extends PlaneGeometry {\n  constructor(options = {}) {\n    options = { ..._NineSliceGeometry.defaultOptions, ...options };\n    super({\n      width: options.width,\n      height: options.height,\n      verticesX: 4,\n      verticesY: 4\n    });\n    this.update(options);\n  }\n  /**\n   * Updates the NineSliceGeometry with the options.\n   * @param options - The options of the NineSliceGeometry.\n   */\n  update(options) {\n    this.width = options.width ?? this.width;\n    this.height = options.height ?? this.height;\n    this._originalWidth = options.originalWidth ?? this._originalWidth;\n    this._originalHeight = options.originalHeight ?? this._originalHeight;\n    this._leftWidth = options.leftWidth ?? this._leftWidth;\n    this._rightWidth = options.rightWidth ?? this._rightWidth;\n    this._topHeight = options.topHeight ?? this._topHeight;\n    this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n    this._anchorX = options.anchor?.x;\n    this._anchorY = options.anchor?.y;\n    this.updateUvs();\n    this.updatePositions();\n  }\n  /** Updates the positions of the vertices. */\n  updatePositions() {\n    const p = this.positions;\n    const {\n      width,\n      height,\n      _leftWidth,\n      _rightWidth,\n      _topHeight,\n      _bottomHeight,\n      _anchorX,\n      _anchorY\n    } = this;\n    const w = _leftWidth + _rightWidth;\n    const scaleW = width > w ? 1 : width / w;\n    const h = _topHeight + _bottomHeight;\n    const scaleH = height > h ? 1 : height / h;\n    const scale = Math.min(scaleW, scaleH);\n    const anchorOffsetX = _anchorX * width;\n    const anchorOffsetY = _anchorY * height;\n    p[0] = p[8] = p[16] = p[24] = -anchorOffsetX;\n    p[2] = p[10] = p[18] = p[26] = _leftWidth * scale - anchorOffsetX;\n    p[4] = p[12] = p[20] = p[28] = width - _rightWidth * scale - anchorOffsetX;\n    p[6] = p[14] = p[22] = p[30] = width - anchorOffsetX;\n    p[1] = p[3] = p[5] = p[7] = -anchorOffsetY;\n    p[9] = p[11] = p[13] = p[15] = _topHeight * scale - anchorOffsetY;\n    p[17] = p[19] = p[21] = p[23] = height - _bottomHeight * scale - anchorOffsetY;\n    p[25] = p[27] = p[29] = p[31] = height - anchorOffsetY;\n    this.getBuffer(\"aPosition\").update();\n  }\n  /** Updates the UVs of the vertices. */\n  updateUvs() {\n    const uvs = this.uvs;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    const _uvw = 1 / this._originalWidth;\n    const _uvh = 1 / this._originalHeight;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.getBuffer(\"aUV\").update();\n  }\n};\n/** The default options for the NineSliceGeometry. */\n_NineSliceGeometry.defaultOptions = {\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  width: 100,\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  height: 100,\n  /** The width of the left column. */\n  leftWidth: 10,\n  /** The height of the top row. */\n  topHeight: 10,\n  /** The width of the right column. */\n  rightWidth: 10,\n  /** The height of the bottom row. */\n  bottomHeight: 10,\n  /** The original width of the texture */\n  originalWidth: 100,\n  /** The original height of the texture */\n  originalHeight: 100\n};\nlet NineSliceGeometry = _NineSliceGeometry;\n\nexport { NineSliceGeometry };\n//# sourceMappingURL=NineSliceGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\n\"use strict\";\nclass NineSliceSpriteGpuData extends BatchableMesh {\n  constructor() {\n    super();\n    this.geometry = new NineSliceGeometry();\n  }\n  destroy() {\n    this.geometry.destroy();\n  }\n}\nclass NineSliceSpritePipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    return !gpuSprite._batcher.checkAndUpdateTexture(\n      gpuSprite,\n      sprite._texture\n    );\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    batchableSprite.geometry.update(sprite);\n    batchableSprite.setTexture(sprite._texture);\n  }\n  _getGpuSprite(sprite) {\n    return sprite._gpuData[this._renderer.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const gpuData = sprite._gpuData[this._renderer.uid] = new NineSliceSpriteGpuData();\n    const batchableMesh = gpuData;\n    batchableMesh.renderable = sprite;\n    batchableMesh.transform = sprite.groupTransform;\n    batchableMesh.texture = sprite._texture;\n    batchableMesh.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    if (!sprite.didViewUpdate) {\n      this._updateBatchableSprite(sprite, batchableMesh);\n    }\n    return gpuData;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nNineSliceSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"nineSliceSprite\"\n};\n\nexport { NineSliceSpriteGpuData, NineSliceSpritePipe };\n//# sourceMappingURL=NineSliceSpritePipe.mjs.map\n","\"use strict\";\nconst tilingBit = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            }\n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    )\n  }\n};\nconst tilingBitGl = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n\n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n\n        `\n    )\n  }\n};\n\nexport { tilingBit, tilingBitGl };\n//# sourceMappingURL=tilingBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { tilingBit, tilingBitGl } from './tilingBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass TilingSpriteShader extends Shader {\n  constructor() {\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBit,\n        tilingBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBitGl,\n        tilingBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    const tilingUniforms = new UniformGroup({\n      uMapCoord: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: \"vec4<f32>\" },\n      uClampOffset: { value: new Float32Array([0, 0]), type: \"vec2<f32>\" },\n      uTextureTransform: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: \"vec4<f32>\" }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: new UniformGroup({\n          uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n          uRound: { value: 0, type: \"f32\" }\n        }),\n        tilingUniforms,\n        uTexture: Texture.EMPTY.source,\n        uSampler: Texture.EMPTY.source.style\n      }\n    });\n  }\n  updateUniforms(width, height, matrix, anchorX, anchorY, texture) {\n    const tilingUniforms = this.resources.tilingUniforms;\n    const textureWidth = texture.width;\n    const textureHeight = texture.height;\n    const textureMatrix = texture.textureMatrix;\n    const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n    uTextureTransform.set(\n      matrix.a * textureWidth / width,\n      matrix.b * textureWidth / height,\n      matrix.c * textureHeight / width,\n      matrix.d * textureHeight / height,\n      matrix.tx / width,\n      matrix.ty / height\n    );\n    uTextureTransform.invert();\n    tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n    tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n    tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n    tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n    tilingUniforms.uniforms.uSizeAnchor[0] = width;\n    tilingUniforms.uniforms.uSizeAnchor[1] = height;\n    tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n    tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n    if (texture) {\n      this.resources.uTexture = texture.source;\n      this.resources.uSampler = texture.source.style;\n    }\n  }\n}\n\nexport { TilingSpriteShader };\n//# sourceMappingURL=TilingSpriteShader.mjs.map\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nclass QuadGeometry extends MeshGeometry {\n  constructor() {\n    super({\n      positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      indices: new Uint32Array([0, 1, 2, 0, 2, 3])\n    });\n  }\n}\n\nexport { QuadGeometry };\n//# sourceMappingURL=QuadGeometry.mjs.map\n","\"use strict\";\nfunction setPositions(tilingSprite, positions) {\n  const anchorX = tilingSprite.anchor.x;\n  const anchorY = tilingSprite.anchor.y;\n  positions[0] = -anchorX * tilingSprite.width;\n  positions[1] = -anchorY * tilingSprite.height;\n  positions[2] = (1 - anchorX) * tilingSprite.width;\n  positions[3] = -anchorY * tilingSprite.height;\n  positions[4] = (1 - anchorX) * tilingSprite.width;\n  positions[5] = (1 - anchorY) * tilingSprite.height;\n  positions[6] = -anchorX * tilingSprite.width;\n  positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n\nexport { setPositions };\n//# sourceMappingURL=setPositions.mjs.map\n","\"use strict\";\nfunction applyMatrix(array, stride, offset, matrix) {\n  let index = 0;\n  const size = array.length / (stride || 2);\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  offset *= stride;\n  while (index < size) {\n    const x = array[offset];\n    const y = array[offset + 1];\n    array[offset] = a * x + c * y + tx;\n    array[offset + 1] = b * x + d * y + ty;\n    offset += stride;\n    index++;\n  }\n}\n\nexport { applyMatrix };\n//# sourceMappingURL=applyMatrix.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { applyMatrix } from './applyMatrix.mjs';\n\n\"use strict\";\nfunction setUvs(tilingSprite, uvs) {\n  const texture = tilingSprite.texture;\n  const width = texture.frame.width;\n  const height = texture.frame.height;\n  let anchorX = 0;\n  let anchorY = 0;\n  if (tilingSprite.applyAnchorToTexture) {\n    anchorX = tilingSprite.anchor.x;\n    anchorY = tilingSprite.anchor.y;\n  }\n  uvs[0] = uvs[6] = -anchorX;\n  uvs[2] = uvs[4] = 1 - anchorX;\n  uvs[1] = uvs[3] = -anchorY;\n  uvs[5] = uvs[7] = 1 - anchorY;\n  const textureMatrix = Matrix.shared;\n  textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n  textureMatrix.tx /= tilingSprite.width;\n  textureMatrix.ty /= tilingSprite.height;\n  textureMatrix.invert();\n  textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n  applyMatrix(uvs, 2, 0, textureMatrix);\n}\n\nexport { setUvs };\n//# sourceMappingURL=setUvs.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../rendering/renderers/shared/state/State.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader.mjs';\nimport { QuadGeometry } from './utils/QuadGeometry.mjs';\nimport { setPositions } from './utils/setPositions.mjs';\nimport { setUvs } from './utils/setUvs.mjs';\n\n\"use strict\";\nconst sharedQuad = new QuadGeometry();\nclass TilingSpriteGpuData {\n  constructor() {\n    this.canBatch = true;\n    this.geometry = new MeshGeometry({\n      indices: sharedQuad.indices.slice(),\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n  }\n  destroy() {\n    this.geometry.destroy();\n    this.shader?.destroy();\n  }\n}\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._state = State.default2d;\n    this._renderer = renderer;\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        renderable.texture\n      );\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { geometry, canBatch } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite.didViewUpdate) {\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.renderable = tilingSprite;\n        batchableMesh.transform = tilingSprite.groupTransform;\n        batchableMesh.setTexture(tilingSprite._texture);\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const { shader } = this._getTilingSpriteData(tilingSprite);\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    color32BitToUniform(\n      tilingSprite.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: this._state\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { canBatch } = tilingSpriteData;\n    if (canBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (tilingSprite.didViewUpdate)\n        this._updateBatchableMesh(tilingSprite);\n      batchableMesh._batcher.updateElement(batchableMesh);\n    } else if (tilingSprite.didViewUpdate) {\n      const { shader } = tilingSpriteData;\n      shader.updateUniforms(\n        tilingSprite.width,\n        tilingSprite.height,\n        tilingSprite._tileTransform.matrix,\n        tilingSprite.anchor.x,\n        tilingSprite.anchor.y,\n        tilingSprite.texture\n      );\n    }\n  }\n  _getTilingSpriteData(renderable) {\n    return renderable._gpuData[this._renderer.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const gpuData = new TilingSpriteGpuData();\n    gpuData.renderable = tilingSprite;\n    tilingSprite._gpuData[this._renderer.uid] = gpuData;\n    return gpuData;\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const { geometry } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs(tilingSprite, geometry.uvs);\n    setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"tilingSprite\"\n};\n\nexport { TilingSpriteGpuData, TilingSpritePipe };\n//# sourceMappingURL=TilingSpritePipe.mjs.map\n","\"use strict\";\nconst localUniformMSDFBit = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `\n    ),\n    main: (\n      /* wgsl */\n      `\n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n    )\n  }\n};\nconst localUniformMSDFBitGl = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform float uDistance;\n         `\n    ),\n    main: (\n      /* glsl */\n      `\n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n    )\n  }\n};\n\nexport { localUniformMSDFBit, localUniformMSDFBitGl };\n//# sourceMappingURL=localUniformMSDFBit.mjs.map\n","\"use strict\";\nconst mSDFBit = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n\n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n\n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n\n            }\n        `\n    )\n  }\n};\nconst mSDFBitGl = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n\n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n\n                // SDF\n                median = min(median, msdfColor.a);\n\n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n            }\n        `\n    )\n  }\n};\n\nexport { mSDFBit, mSDFBitGl };\n//# sourceMappingURL=mSDFBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit, generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit.mjs';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass SdfShader extends Shader {\n  constructor(maxTextures) {\n    const uniforms = new UniformGroup({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uDistance: { value: 4, type: \"f32\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(maxTextures),\n        localUniformMSDFBit,\n        mSDFBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBitGl,\n        generateTextureBatchBitGl(maxTextures),\n        localUniformMSDFBitGl,\n        mSDFBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\n\nexport { SdfShader };\n//# sourceMappingURL=SdfShader.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Graphics } from '../graphics/shared/Graphics.mjs';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics.mjs';\nimport { SdfShader } from '../text/sdfShader/SdfShader.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\n\n\"use strict\";\nclass BitmapTextGraphics extends Graphics {\n  destroy() {\n    if (this.context.customShader) {\n      this.context.customShader.destroy();\n    }\n    super.destroy();\n  }\n}\nclass BitmapTextPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuBitmapText\");\n  }\n  validateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n  }\n  addRenderable(bitmapText, instructionSet) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  updateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  _updateContext(bitmapText, proxyGraphics) {\n    const { context } = proxyGraphics;\n    const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n    context.clear();\n    if (bitmapFont.distanceField.type !== \"none\") {\n      if (!context.customShader) {\n        context.customShader = new SdfShader(this._renderer.limits.maxBatchableTextures);\n      }\n    }\n    const chars = CanvasTextMetrics.graphemeSegmenter(bitmapText.text);\n    const style = bitmapText._style;\n    let currentY = bitmapFont.baseLineOffset;\n    const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n    const padding = style.padding;\n    const scale = bitmapTextLayout.scale;\n    let tx = bitmapTextLayout.width;\n    let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n    if (style._stroke) {\n      tx += style._stroke.width / scale;\n      ty += style._stroke.width / scale;\n    }\n    context.translate(-bitmapText._anchor._x * tx - padding, -bitmapText._anchor._y * ty - padding).scale(scale, scale);\n    const tint = bitmapFont.applyFillAsTint ? style._fill.color : 16777215;\n    let fontSize = bitmapFont.fontMetrics.fontSize;\n    let lineHeight = bitmapFont.lineHeight;\n    if (style.lineHeight) {\n      fontSize = style.fontSize / scale;\n      lineHeight = style.lineHeight / scale;\n    }\n    let linePositionYShift = (lineHeight - fontSize) / 2;\n    if (linePositionYShift - bitmapFont.baseLineOffset < 0) {\n      linePositionYShift = 0;\n    }\n    for (let i = 0; i < bitmapTextLayout.lines.length; i++) {\n      const line = bitmapTextLayout.lines[i];\n      for (let j = 0; j < line.charPositions.length; j++) {\n        const char = line.chars[j];\n        const charData = bitmapFont.chars[char];\n        if (charData?.texture) {\n          const texture = charData.texture;\n          context.texture(\n            texture,\n            tint ? tint : \"black\",\n            Math.round(line.charPositions[j] + charData.xOffset),\n            Math.round(currentY + charData.yOffset + linePositionYShift),\n            texture.orig.width,\n            texture.orig.height\n          );\n        }\n      }\n      currentY += lineHeight;\n    }\n  }\n  _getGpuBitmapText(bitmapText) {\n    return bitmapText._gpuData[this._renderer.uid] || this.initGpuText(bitmapText);\n  }\n  initGpuText(bitmapText) {\n    const proxyRenderable = new BitmapTextGraphics();\n    bitmapText._gpuData[this._renderer.uid] = proxyRenderable;\n    this._updateContext(bitmapText, proxyRenderable);\n    return proxyRenderable;\n  }\n  _updateDistanceField(bitmapText) {\n    const context = this._getGpuBitmapText(bitmapText).context;\n    const fontFamily = bitmapText._style.fontFamily;\n    const dynamicFont = Cache.get(`${fontFamily}-bitmap`);\n    const { a, b, c, d } = bitmapText.groupTransform;\n    const dx = Math.sqrt(a * a + b * b);\n    const dy = Math.sqrt(c * c + d * d);\n    const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n    const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n    const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n    context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBitmapTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"bitmapText\"\n};\nfunction syncWithProxy(container, proxy) {\n  proxy.groupTransform = container.groupTransform;\n  proxy.groupColorAlpha = container.groupColorAlpha;\n  proxy.groupColor = container.groupColor;\n  proxy.groupBlendMode = container.groupBlendMode;\n  proxy.globalDisplayStatus = container.globalDisplayStatus;\n  proxy.groupTransform = container.groupTransform;\n  proxy.localDisplayStatus = container.localDisplayStatus;\n  proxy.groupAlpha = container.groupAlpha;\n  proxy._roundPixels = container._roundPixels;\n}\n\nexport { BitmapTextGraphics, BitmapTextPipe };\n//# sourceMappingURL=BitmapTextPipe.mjs.map\n","import { BatchableSprite } from '../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass BatchableHTMLText extends BatchableSprite {\n  /**\n   * Creates an instance of BatchableHTMLText.\n   * @param renderer - The renderer instance to be used.\n   */\n  constructor(renderer) {\n    super();\n    this.generatingTexture = false;\n    this._renderer = renderer;\n    renderer.runners.resolutionChange.add(this);\n  }\n  /** Handles resolution changes for the HTML text. If the text has auto resolution enabled, it triggers a view update. */\n  resolutionChange() {\n    const text = this.renderable;\n    if (text._autoResolution) {\n      text.onViewUpdate();\n    }\n  }\n  /** Destroys the BatchableHTMLText instance. Returns the texture promise to the renderer and cleans up references. */\n  destroy() {\n    this._renderer.htmlText.returnTexturePromise(this.texturePromise);\n    this.texturePromise = null;\n    this._renderer = null;\n  }\n}\n\nexport { BatchableHTMLText };\n//# sourceMappingURL=BatchableHTMLText.mjs.map\n","import { updateQuadBounds } from '../../../utils/data/updateQuadBounds.mjs';\n\n\"use strict\";\nfunction updateTextBounds(batchableSprite, text) {\n  const { texture, bounds } = batchableSprite;\n  const padding = text._style._getFinalPadding();\n  updateQuadBounds(bounds, text._anchor, texture);\n  const paddingOffset = text._anchor._x * padding * 2;\n  const paddingOffsetY = text._anchor._y * padding * 2;\n  bounds.minX -= padding - paddingOffset;\n  bounds.minY -= padding - paddingOffsetY;\n  bounds.maxX -= padding - paddingOffset;\n  bounds.maxY -= padding - paddingOffsetY;\n}\n\nexport { updateTextBounds };\n//# sourceMappingURL=updateTextBounds.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { updateTextBounds } from '../text/utils/updateTextBounds.mjs';\nimport { BatchableHTMLText } from './BatchableHTMLText.mjs';\n\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  validateRenderable(htmlText) {\n    return htmlText._didTextUpdate;\n  }\n  addRenderable(htmlText, instructionSet) {\n    const batchableHTMLText = this._getGpuText(htmlText);\n    if (htmlText._didTextUpdate) {\n      this._updateGpuText(htmlText).catch((e) => {\n        console.error(e);\n      });\n      htmlText._didTextUpdate = false;\n      updateTextBounds(batchableHTMLText, htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableHTMLText, instructionSet);\n  }\n  updateRenderable(htmlText) {\n    const batchableHTMLText = this._getGpuText(htmlText);\n    batchableHTMLText._batcher.updateElement(batchableHTMLText);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const batchableHTMLText = this._getGpuText(htmlText);\n    if (batchableHTMLText.generatingTexture)\n      return;\n    if (batchableHTMLText.texturePromise) {\n      this._renderer.htmlText.returnTexturePromise(batchableHTMLText.texturePromise);\n      batchableHTMLText.texturePromise = null;\n    }\n    batchableHTMLText.generatingTexture = true;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    const texturePromise = this._renderer.htmlText.getTexturePromise(htmlText);\n    batchableHTMLText.texturePromise = texturePromise;\n    batchableHTMLText.texture = await texturePromise;\n    const renderGroup = htmlText.renderGroup || htmlText.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.structureDidChange = true;\n    }\n    batchableHTMLText.generatingTexture = false;\n    updateTextBounds(batchableHTMLText, htmlText);\n  }\n  _getGpuText(htmlText) {\n    return htmlText._gpuData[this._renderer.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const batchableHTMLText = new BatchableHTMLText(this._renderer);\n    batchableHTMLText.renderable = htmlText;\n    batchableHTMLText.transform = htmlText.groupTransform;\n    batchableHTMLText.texture = Texture.EMPTY;\n    batchableHTMLText.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableHTMLText.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    htmlText._gpuData[this._renderer.uid] = batchableHTMLText;\n    return batchableHTMLText;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextPipe };\n//# sourceMappingURL=HTMLTextPipe.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nfunction isSafari() {\n  const { userAgent } = DOMAdapter.get().getNavigator();\n  return /^((?!chrome|android).)*safari/i.test(userAgent);\n}\n\nexport { isSafari };\n//# sourceMappingURL=isSafari.mjs.map\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nfunction getPo2TextureFromSource(image, width, height, resolution) {\n  const bounds = tempBounds;\n  bounds.minX = 0;\n  bounds.minY = 0;\n  bounds.maxX = image.width / resolution | 0;\n  bounds.maxY = image.height / resolution | 0;\n  const texture = TexturePool.getOptimalTexture(\n    bounds.width,\n    bounds.height,\n    resolution,\n    false\n  );\n  texture.source.uploadMethodId = \"image\";\n  texture.source.resource = image;\n  texture.source.alphaMode = \"premultiply-alpha-on-upload\";\n  texture.frame.width = width / resolution;\n  texture.frame.height = height / resolution;\n  texture.source.emit(\"update\", texture.source);\n  texture.updateUvs();\n  return texture;\n}\n\nexport { getPo2TextureFromSource };\n//# sourceMappingURL=getPo2TextureFromSource.mjs.map\n","\"use strict\";\nfunction extractFontFamilies(text, style) {\n  const fontFamily = style.fontFamily;\n  const fontFamilies = [];\n  const dedupe = {};\n  const regex = /font-family:([^;\"\\s]+)/g;\n  const matches = text.match(regex);\n  function addFontFamily(fontFamily2) {\n    if (!dedupe[fontFamily2]) {\n      fontFamilies.push(fontFamily2);\n      dedupe[fontFamily2] = true;\n    }\n  }\n  if (Array.isArray(fontFamily)) {\n    for (let i = 0; i < fontFamily.length; i++) {\n      addFontFamily(fontFamily[i]);\n    }\n  } else {\n    addFontFamily(fontFamily);\n  }\n  if (matches) {\n    matches.forEach((match) => {\n      const fontFamily2 = match.split(\":\")[1].trim();\n      addFontFamily(fontFamily2);\n    });\n  }\n  for (const i in style.tagStyles) {\n    const fontFamily2 = style.tagStyles[i].fontFamily;\n    addFontFamily(fontFamily2);\n  }\n  return fontFamilies;\n}\n\nexport { extractFontFamilies };\n//# sourceMappingURL=extractFontFamilies.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\n\n\"use strict\";\nasync function loadFontAsBase64(url) {\n  const response = await DOMAdapter.get().fetch(url);\n  const blob = await response.blob();\n  const reader = new FileReader();\n  const dataSrc = await new Promise((resolve, reject) => {\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n  return dataSrc;\n}\n\nexport { loadFontAsBase64 };\n//# sourceMappingURL=loadFontAsBase64.mjs.map\n","import { loadFontAsBase64 } from './loadFontAsBase64.mjs';\n\n\"use strict\";\nasync function loadFontCSS(style, url) {\n  const dataSrc = await loadFontAsBase64(url);\n  return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n        src: url('${dataSrc}');\n    }`;\n}\n\nexport { loadFontCSS };\n//# sourceMappingURL=loadFontCSS.mjs.map\n","import { Cache } from '../../../assets/cache/Cache.mjs';\nimport { loadFontCSS } from './loadFontCSS.mjs';\n\n\"use strict\";\nconst FontStylePromiseCache = /* @__PURE__ */ new Map();\nasync function getFontCss(fontFamilies) {\n  const fontPromises = fontFamilies.filter((fontFamily) => Cache.has(`${fontFamily}-and-url`)).map((fontFamily) => {\n    if (!FontStylePromiseCache.has(fontFamily)) {\n      const { entries } = Cache.get(`${fontFamily}-and-url`);\n      const promises = [];\n      entries.forEach((entry) => {\n        const url = entry.url;\n        const faces = entry.faces;\n        const out = faces.map((face) => ({ weight: face.weight, style: face.style }));\n        promises.push(\n          ...out.map(\n            (style) => loadFontCSS(\n              {\n                fontWeight: style.weight,\n                fontStyle: style.style,\n                fontFamily\n              },\n              url\n            )\n          )\n        );\n      });\n      FontStylePromiseCache.set(\n        fontFamily,\n        Promise.all(promises).then((css) => css.join(\"\\n\"))\n      );\n    }\n    return FontStylePromiseCache.get(fontFamily);\n  });\n  return (await Promise.all(fontPromises)).join(\"\\n\");\n}\n\nexport { FontStylePromiseCache, getFontCss };\n//# sourceMappingURL=getFontCss.mjs.map\n","\"use strict\";\nfunction getSVGUrl(text, style, resolution, fontCSS, htmlTextData) {\n  const { domElement, styleElement, svgRoot } = htmlTextData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n  domElement.setAttribute(\"style\", `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n  styleElement.textContent = fontCSS;\n  const { width, height } = htmlTextData.image;\n  svgRoot.setAttribute(\"width\", width.toString());\n  svgRoot.setAttribute(\"height\", height.toString());\n  return new XMLSerializer().serializeToString(svgRoot);\n}\n\nexport { getSVGUrl };\n//# sourceMappingURL=getSVGUrl.mjs.map\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\n\n\"use strict\";\nfunction getTemporaryCanvasFromImage(image, resolution) {\n  const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n    image.width,\n    image.height,\n    resolution\n  );\n  const { context } = canvasAndContext;\n  context.clearRect(0, 0, image.width, image.height);\n  context.drawImage(image, 0, 0);\n  return canvasAndContext;\n}\n\nexport { getTemporaryCanvasFromImage };\n//# sourceMappingURL=getTemporaryCanvasFromImage.mjs.map\n","\"use strict\";\nfunction loadSVGImage(image, url, delay) {\n  return new Promise(async (resolve) => {\n    if (delay) {\n      await new Promise((resolve2) => setTimeout(resolve2, 100));\n    }\n    image.onload = () => {\n      resolve();\n    };\n    image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n    image.crossOrigin = \"anonymous\";\n  });\n}\n\nexport { loadSVGImage };\n//# sourceMappingURL=loadSVGImage.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { isSafari } from '../../utils/browser/isSafari.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource.mjs';\nimport { HTMLTextRenderData } from './HTMLTextRenderData.mjs';\nimport { extractFontFamilies } from './utils/extractFontFamilies.mjs';\nimport { getFontCss } from './utils/getFontCss.mjs';\nimport { getSVGUrl } from './utils/getSVGUrl.mjs';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage.mjs';\nimport { loadSVGImage } from './utils/loadSVGImage.mjs';\nimport { measureHtmlText } from './utils/measureHtmlText.mjs';\n\n\"use strict\";\nclass HTMLTextSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n    this._createCanvas = renderer.type === RendererType.WEBGPU;\n  }\n  /**\n   * @param options\n   * @deprecated Use getTexturePromise instead\n   */\n  getTexture(options) {\n    return this.getTexturePromise(options);\n  }\n  getTexturePromise(options) {\n    return this._buildTexturePromise(options);\n  }\n  async _buildTexturePromise(options) {\n    const { text, style, resolution, textureStyle } = options;\n    const htmlTextData = BigPool.get(HTMLTextRenderData);\n    const fontFamilies = extractFontFamilies(text, style);\n    const fontCSS = await getFontCss(fontFamilies);\n    const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const image = htmlTextData.image;\n    const uvSafeOffset = 2;\n    image.width = (width | 0) + uvSafeOffset;\n    image.height = (height | 0) + uvSafeOffset;\n    const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n    await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n    const resource = image;\n    let canvasAndContext;\n    if (this._createCanvas) {\n      canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n    }\n    const texture = getPo2TextureFromSource(\n      canvasAndContext ? canvasAndContext.canvas : resource,\n      image.width - uvSafeOffset,\n      image.height - uvSafeOffset,\n      resolution\n    );\n    if (textureStyle)\n      texture.source.style = textureStyle;\n    if (this._createCanvas) {\n      this._renderer.texture.initSource(texture.source);\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n    }\n    BigPool.return(htmlTextData);\n    return texture;\n  }\n  returnTexturePromise(texturePromise) {\n    texturePromise.then((texture) => {\n      this._cleanUp(texture);\n    }).catch(() => {\n      warn(\"HTMLTextSystem: Failed to clean texture\");\n    });\n  }\n  _cleanUp(texture) {\n    TexturePool.returnTexture(texture, true);\n    texture.source.resource = null;\n    texture.source.uploadMethodId = \"unknown\";\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextSystem };\n//# sourceMappingURL=HTMLTextSystem.mjs.map\n","import { BatchableSprite } from '../../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass BatchableText extends BatchableSprite {\n  constructor(renderer) {\n    super();\n    this._renderer = renderer;\n    renderer.runners.resolutionChange.add(this);\n  }\n  resolutionChange() {\n    const text = this.renderable;\n    if (text._autoResolution) {\n      text.onViewUpdate();\n    }\n  }\n  destroy() {\n    this._renderer.canvasText.returnTexture(this.texture);\n    this._renderer = null;\n  }\n}\n\nexport { BatchableText };\n//# sourceMappingURL=BatchableText.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { updateTextBounds } from '../utils/updateTextBounds.mjs';\nimport { BatchableText } from './BatchableText.mjs';\n\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  validateRenderable(text) {\n    return text._didTextUpdate;\n  }\n  addRenderable(text, instructionSet) {\n    const batchableText = this._getGpuText(text);\n    if (text._didTextUpdate) {\n      this._updateGpuText(text);\n      text._didTextUpdate = false;\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableText, instructionSet);\n  }\n  updateRenderable(text) {\n    const batchableText = this._getGpuText(text);\n    batchableText._batcher.updateElement(batchableText);\n  }\n  _updateGpuText(text) {\n    const batchableText = this._getGpuText(text);\n    if (batchableText.texture) {\n      this._renderer.canvasText.returnTexture(batchableText.texture);\n    }\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    batchableText.texture = this._renderer.canvasText.getTexture(text);\n    updateTextBounds(batchableText, text);\n  }\n  _getGpuText(text) {\n    return text._gpuData[this._renderer.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const batchableText = new BatchableText(this._renderer);\n    batchableText.renderable = text;\n    batchableText.transform = text.groupTransform;\n    batchableText.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableText.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    text._gpuData[this._renderer.uid] = batchableText;\n    return batchableText;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"text\"\n};\n\nexport { CanvasTextPipe };\n//# sourceMappingURL=CanvasTextPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { TextureStyle } from '../../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport { deprecation } from '../../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../TextStyle.mjs';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource.mjs';\nimport { CanvasTextGenerator } from './CanvasTextGenerator.mjs';\n\n\"use strict\";\nclass CanvasTextSystem {\n  constructor(_renderer) {\n    this._renderer = _renderer;\n  }\n  getTexture(options, _resolution, _style, _textKey) {\n    if (typeof options === \"string\") {\n      deprecation(\"8.0.0\", \"CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments\");\n      options = {\n        text: options,\n        style: _style,\n        resolution: _resolution\n      };\n    }\n    if (!(options.style instanceof TextStyle)) {\n      options.style = new TextStyle(options.style);\n    }\n    if (!(options.textureStyle instanceof TextureStyle)) {\n      options.textureStyle = new TextureStyle(options.textureStyle);\n    }\n    if (typeof options.text !== \"string\") {\n      options.text = options.text.toString();\n    }\n    const { text, style, textureStyle } = options;\n    const resolution = options.resolution ?? this._renderer.resolution;\n    const { frame, canvasAndContext } = CanvasTextGenerator.getCanvasAndContext({\n      text,\n      style,\n      resolution\n    });\n    const texture = getPo2TextureFromSource(canvasAndContext.canvas, frame.width, frame.height, resolution);\n    if (textureStyle)\n      texture.source.style = textureStyle;\n    if (style.trim) {\n      frame.pad(style.padding);\n      texture.frame.copyFrom(frame);\n      texture.frame.scale(1 / resolution);\n      texture.updateUvs();\n    }\n    if (style.filters) {\n      const filteredTexture = this._applyFilters(texture, style.filters);\n      this.returnTexture(texture);\n      CanvasTextGenerator.returnCanvasAndContext(canvasAndContext);\n      return filteredTexture;\n    }\n    this._renderer.texture.initSource(texture._source);\n    CanvasTextGenerator.returnCanvasAndContext(canvasAndContext);\n    return texture;\n  }\n  /**\n   * Returns a texture that was created wit the above `getTexture` function.\n   * Handy if you are done with a texture and want to return it to the pool.\n   * @param texture - The texture to be returned.\n   */\n  returnTexture(texture) {\n    const source = texture.source;\n    source.resource = null;\n    source.uploadMethodId = \"unknown\";\n    source.alphaMode = \"no-premultiply-alpha\";\n    TexturePool.returnTexture(texture, true);\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   * @deprecated since 8.10.0\n   */\n  renderTextToCanvas() {\n    deprecation(\n      \"8.10.0\",\n      \"CanvasTextSystem.renderTextToCanvas: no longer supported, use CanvasTextSystem.getTexture instead\"\n    );\n  }\n  /**\n   * Applies the specified filters to the given texture.\n   *\n   * This method takes a texture and a list of filters, applies the filters to the texture,\n   * and returns the resulting texture. It also ensures that the alpha mode of the resulting\n   * texture is set to 'premultiplied-alpha'.\n   * @param {Texture} texture - The texture to which the filters will be applied.\n   * @param {Filter[]} filters - The filters to apply to the texture.\n   * @returns {Texture} The resulting texture after all filters have been applied.\n   */\n  _applyFilters(texture, filters) {\n    const currentRenderTarget = this._renderer.renderTarget.renderTarget;\n    const resultTexture = this._renderer.filter.generateFilteredTexture({\n      texture,\n      filters\n    });\n    this._renderer.renderTarget.bind(currentRenderTarget, false);\n    return resultTexture;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"canvasText\"\n};\n\nexport { CanvasTextSystem };\n//# sourceMappingURL=CanvasTextSystem.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { ResizePlugin } from './ResizePlugin.mjs';\nimport { TickerPlugin } from './TickerPlugin.mjs';\n\n\"use strict\";\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem.mjs';\nimport { GraphicsPipe } from './shared/GraphicsPipe.mjs';\n\n\"use strict\";\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { MeshPipe } from './shared/MeshPipe.mjs';\n\n\"use strict\";\nextensions.add(MeshPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe.mjs';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe.mjs';\n\n\"use strict\";\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe.mjs';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem.mjs';\n\n\"use strict\";\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { BitmapTextPipe } from './BitmapTextPipe.mjs';\n\n\"use strict\";\nextensions.add(BitmapTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { HTMLTextPipe } from './HTMLTextPipe.mjs';\nimport { HTMLTextSystem } from './HTMLTextSystem.mjs';\n\n\"use strict\";\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { TilingSpritePipe } from './TilingSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(TilingSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(NineSliceSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { FilterPipe } from './FilterPipe.mjs';\nimport { FilterSystem } from './FilterSystem.mjs';\n\n\"use strict\";\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n//# sourceMappingURL=init.mjs.map\n"],"names":["ResizePlugin","options","dom","width","height","clientWidth","clientHeight","ExtensionType","TickerPlugin","ticker","UPDATE_PRIORITY","Ticker","oldTicker","FilterPipe","renderer","filterEffect","container","instructionSet","_filterEffect","_container","instruction","getGlobalRenderableBounds","renderables","bounds","tempMatrix","i","renderable","quadGeometry","Geometry","FilterData","Bounds","FilterSystem","UniformGroup","BindGroup","filters","filterData","colorTextureSource","rootResolution","rootAntialias","previousFilterData","globalResolution","offsetX","offsetY","texture","TexturePool","Texture","outputTexture","lastRenderSurface","previousBounds","backgroundResolution","backTexture","x","y","filter","input","output","clear","isFinalTarget","resolution","offset","outputMatrix","sprite","data","mappedMatrix","worldTransform","Matrix","renderGroup","batchUniforms","RendererType","renderTarget","sourceWidth","sourceHeight","globalFrame","uniforms","outputFrame","inputSize","inputPixel","inputClamp","rootTexture","currentIndex","lastIndex","prevFilterData","filterFrameTransform","inputTexture","flip","tempTexture","flop","t","viewPort","paddingMultiplier","padding","antialias","blendRequired","enabled","clipToViewport","warn","index","_MeshGeometry","args","deprecation","v8_0_0","positions","uvs","indices","shrinkToFit","positionBuffer","Buffer","BufferUsage","uvBuffer","indexBuffer","value","MeshGeometry","nssvg","nsxhtml","HTMLTextRenderData","foreignObject","svgRoot","styleElement","domElement","DOMAdapter","tempHTMLTextRenderData","measureHtmlText","text","style","fontStyleCSS","htmlTextRenderData","contentBounds","doublePadding","GraphicsGpuData","batch","BigPool","GraphicsPipe","adaptor","State","graphics","context","wasBatched","gpuContext","batches","shader","localUniforms","color32BitToUniform","gpuData","batchPipe","roundPixels","batchClone","BatchableGraphics","_PlaneGeometry","total","verts","verticesX","verticesY","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","PlaneGeometry","BatchableMesh","transformedUvs","textureMatrix","MeshGpuData","MeshPipe","mesh","meshData","isBatched","geometry","batchableMesh","batcher","gpuBatchableMesh","getAdjustedBlendModeBlend","_a","_b","gpuMesh","GlParticleContainerAdaptor","particleContainerPipe","state","gl","buffer","glType","GpuParticleContainerAdaptor","createIndicesForQuads","size","outBuffer","totalIndices","j","generateParticleUpdateFunction","properties","generateUpdateFunction","dynamic","funcFragments","property","attributeInfo","getAttributeInfoFromFormat","functionSource","ParticleBuffer","staticVertexSize","dynamicVertexSize","ViewableBuffer","dynamicOffset","staticOffset","uploadFunction","key","getParticleSyncKey","particles","uploadStatic","dynamicAttributeBuffer","staticAttributeBuffer","keyGen","fragment","vertex","wgsl","ParticleShader","Shader","glProgram","GlProgram","gpuProgram","GpuProgram","TextureStyle","Color","ParticleContainerPipe","_renderable","children","transformationMatrix","GlParticleContainerPipe","GpuParticleContainerPipe","_NineSliceGeometry","p","_leftWidth","_rightWidth","_topHeight","_bottomHeight","_anchorX","_anchorY","w","scaleW","h","scaleH","scale","anchorOffsetX","anchorOffsetY","_uvw","_uvh","NineSliceGeometry","NineSliceSpriteGpuData","NineSliceSpritePipe","gpuSprite","batchableSprite","tilingBit","tilingBitGl","TilingSpriteShader","compileHighShaderGpuProgram","localUniformBit","roundPixelsBit","compileHighShaderGlProgram","localUniformBitGl","roundPixelsBitGl","tilingUniforms","matrix","anchorX","anchorY","textureWidth","textureHeight","uTextureTransform","QuadGeometry","setPositions","tilingSprite","applyMatrix","array","stride","a","b","c","d","tx","ty","setUvs","sharedQuad","TilingSpriteGpuData","TilingSpritePipe","tilingSpriteData","couldBatch","canBatch","renderableData","_nonPowOf2wrapping","localUniformMSDFBit","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","maxTextures","colorBit","generateTextureBatchBit","colorBitGl","generateTextureBatchBitGl","getBatchSamplersUniformGroup","BitmapTextGraphics","Graphics","BitmapTextPipe","bitmapText","graphicsRenderable","syncWithProxy","proxyGraphics","bitmapFont","BitmapFontManager","chars","CanvasTextMetrics","currentY","bitmapTextLayout","getBitmapTextLayout","tint","fontSize","lineHeight","linePositionYShift","line","char","charData","proxyRenderable","fontFamily","dynamicFont","Cache","dx","dy","worldScale","fontScale","distance","proxy","BatchableHTMLText","BatchableSprite","updateTextBounds","updateQuadBounds","paddingOffset","paddingOffsetY","HTMLTextPipe","htmlText","batchableHTMLText","e","texturePromise","isSafari","userAgent","tempBounds","getPo2TextureFromSource","image","extractFontFamilies","fontFamilies","dedupe","regex","matches","addFontFamily","fontFamily2","match","loadFontAsBase64","url","blob","reader","resolve","reject","loadFontCSS","dataSrc","FontStylePromiseCache","getFontCss","fontPromises","entries","promises","entry","out","face","css","getSVGUrl","fontCSS","htmlTextData","getTemporaryCanvasFromImage","canvasAndContext","CanvasPool","loadSVGImage","delay","resolve2","HTMLTextSystem","textureStyle","measured","uvSafeOffset","svgURL","resource","BatchableText","CanvasTextPipe","batchableText","CanvasTextSystem","_renderer","_resolution","_style","_textKey","TextStyle","frame","CanvasTextGenerator","filteredTexture","source","currentRenderTarget","resultTexture","extensions","GraphicsContextSystem"],"mappings":"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"}